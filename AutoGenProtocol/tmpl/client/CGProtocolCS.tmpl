{{- if .IsNeedSpecialEx }}using UnityEngine;{{end}}
namespace ProjectS
{
    public class {{.ClassName}} : GameServerUpwardPacket
    {
        public override int Id
        {
            get
            {
                return {{.ProtocolName}};
            }
        }
        {{range .DataVar}}{{if .VarIsArray}}
        public {{.VarType}}[] m_{{.VarValue}} = new {{.VarType}}[{{.VarCount}}];{{else}}
        public {{.VarType}} m_{{.VarValue}};{{end}}{{end}}
        public override void Clear()
        {
            {{- range .DataVar}}
            {{- if .VarIsArray }}
            for ( int i=0; i<{{.VarCount}}; ++i )
            {
                {{- if eq .VarType "string"}}
                m_{{.VarValue}}[i] = string.Empty;
                {{- else if eq .VarType "WorldPostion"}}
                m_{{.VarValue}}[i].Clear();
                {{- else}}
                m_{{.VarValue}}[i] = default({{.VarType}});
                {{- end}}
            }
            {{- else}}
            {{- if eq .VarType "string"}}
            m_{{.VarValue}} = string.Empty;
            {{- else if eq .VarType "WorldPostion"}}
            m_{{.VarValue}}.Clear();
            {{- else}}
            m_{{.VarValue}} = default({{.VarType}});
             {{- end}}
            {{- end}}
            {{- end}}
        }
        public override int WriteStream(byte[] stream, int index, int size)
        {
            {{- range .DataVar}}
            {{- if .VarIsArray }}
            {{- if ne .VarType "byte"}}
            for ( int i=0; i<m_{{.VarValue}}Count; ++i )
            {
            {{- end}}
            {{- end}}
            {{- if eq .VarType "ulong"}}
            {{if .VarIsArray}}    {{end}}index = WriteUInt64(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "long"}}
            {{if .VarIsArray}}    {{end}}index = WriteInt64(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "uint"}}
            {{if .VarIsArray}}    {{end}}index = WriteUInt32(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "int"}}
            {{if .VarIsArray}}    {{end}}index = WriteInt32(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "float"}}
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "double"}}
            {{if .VarIsArray}}    {{end}}index = WriteDouble(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "ushort"}}
            {{if .VarIsArray}}    {{end}}index = WriteUInt16(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "short"}}
            {{if .VarIsArray}}    {{end}}index = WriteInt16(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "bool"}}
            {{if .VarIsArray}}    {{end}}index = WriteBool(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}, stream, index, size);
            {{- else if eq .VarType "string"}}
            {{if .VarIsArray}}    {{end}}int len = PASocketStreamAssist.GetStringBytesLen(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}});
            {{if .VarIsArray}}    {{end}}index = WriteByte((byte)len, stream, index, size);
            {{if .VarIsArray}}    {{end}}index = WriteCharArray(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.ToCharArray(), len, stream, index, size, true, true);
            {{- else if eq .VarType "byte"}}
            {{- if .VarIsArray}}
            index = WriteBytes(m_{{.VarValue}}, m_{{.VarValue}}Count, stream, index, size);
            {{- else}}
                index = WriteByte(m_{{.VarValue}}, stream, index, size);
            {{- end}}
            {{- else if eq .VarType "WorldPostion"}}
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.x, stream, index, size);
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.z, stream, index, size);
            {{- else if eq .VarType "Vector3"}}
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.x, stream, index, size);
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.y, stream, index, size);
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.z, stream, index, size);
            {{- else if eq .VarType "Vector2"}}
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.x, stream, index, size);
            {{if .VarIsArray}}    {{end}}index = WriteSingle(m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}}.y, stream, index, size);
            {{- end}}
            {{- if .VarIsArray}}
            {{- if ne .VarType "byte"}}
            }
            {{- end}}
            {{- end}}
            {{- end}}
            return index;
        }
    }
}