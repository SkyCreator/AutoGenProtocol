local {{.ClassName}} = class("{{.ClassName}}", LuaResponsePacket)
function {{.ClassName}}:ReadStream()
    {{- range .DataVar}}
        {{- if .VarIsArray }}
        {{- if ne .VarType "byte"}}
        self.m_{{.VarValue}} = {}
        for i=1, m_{{.VarValue}}Count do
        {{- end}}
        {{- end}}
        {{- if eq .VarType "ulong"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadUInt64();
        {{- else if eq .VarType "long"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadInt64();
        {{- else if eq .VarType "uint"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadUInt32();
        {{- else if eq .VarType "int"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadInt32();
        {{- else if eq .VarType "float"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadSingle();
        {{- else if eq .VarType "double"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadDouble();
        {{- else if eq .VarType "ushort"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadUInt16();
        {{- else if eq .VarType "short"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadInt16();
        {{- else if eq .VarType "bool"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadBool();
        {{- else if eq .VarType "string"}}
        {{if .VarIsArray}}    {{end}}self.m_{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = self.ReadString(self.m_{{.VarValue}}Count);
        {{- else if eq .VarType "byte"}}
        {{- if .VarIsArray}}
        self.m_{{.VarValue}} = self.ReadBytes(self.m_{{.VarValue}}, m_{{.VarValue}}Count);
        {{- else}}
            self.m_{{.VarValue}} = self.ReadByte(self.m_{{.VarValue}});
        {{- end}}
        {{- else if eq .VarType "WorldPostion"}}
        {{if .VarIsArray}}    {{end}}local {{.VarValue}}x = self.ReadSingle();
        {{if .VarIsArray}}    {{end}}local {{.VarValue}}z = self.ReadSingle();
        {{if .VarIsArray}}    {{end}}self.{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = {x={{.VarValue}}x, z={{.VarValue}}z}
        {{- else if eq .VarType "Vector3"}}
        {{if .VarIsArray}}    {{end}}local {{.VarValue}}x = self.ReadSingle();
        {{if .VarIsArray}}    {{end}}local {{.VarValue}}y = self.ReadSingle();
        {{if .VarIsArray}}    {{end}}local {{.VarValue}}z = self.ReadSingle();
        {{if .VarIsArray}}    {{end}}self.{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = Vector3({{.VarValue}}x, {{.VarValue}}y, {{.VarValue}}z)
        {{- else if eq .VarType "Vector2"}}
        {{if .VarIsArray}}    {{end}}local {{.VarValue}}x = self.ReadSingle();
        {{if .VarIsArray}}    {{end}}local {{.VarValue}}y = self.ReadSingle();
        {{if .VarIsArray}}    {{end}}self.{{.VarValue}}{{if .VarIsArray}}[i]{{end}} = Vector2({{.VarValue}}x, {{.VarValue}}y)
        {{- end}}
        {{- if .VarIsArray}}
        {{- if ne .VarType "byte"}}
        end
        {{- end}}
        {{- end}}
        {{- end}}
end

function {{.ClassName}}:Handler()
end
return {{.ClassName}}
